[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\n##### R Stuff in the background ######\nlibrary(tidyverse)\nx0 = 0; y0 = 0; rotation = 3\nradius = .5;\n\ngroups <- max(c(length(x0), length(y0)))\n\nreturn_heart_df <- function(n_vertices){\n\n  tibble::tibble(x0, y0, group = 1:groups) %>%\n    tidyr::crossing(the_n = 2*pi*(1:n_vertices)/n_vertices) %>%\n    dplyr::mutate(\n      y = y0 + radius * (\n        .85 * cos(the_n)\n        - .35 * cos(2 * the_n)\n        - .25 * cos(3 * the_n)\n        - .05 * cos(4 * the_n)\n      ) - rotation * pi,\n      x = x0 + radius * (sin(the_n)^3) - rotation * pi)\n}\n\n\n### Design code to be featured in app ####\nreturn_heart_df(n_vertices = 16) %>%\n  ggplot() +\n  aes(x = x, y = y, group = group) +\n  geom_polygon(\n    fill = \"darkred\",\n    color = \"magenta\",\n    size = 4,\n    alpha = 0.8,\n    linetype = \"dashed\"\n  ) +\n  coord_equal()\n\n\n\n### What we need 'for shiny' translation of above\n'\n# library(my_return_heart_package)\n\nreturn_heart_df(n_vertices = input$z) %>%\n  ggplot() +\n  aes(x = x, y = y, group = group) +\n  geom_polygon(\n           fill = input$fill,\n           color = input$color,\n           size = input$size,\n           alpha = input$alpha,\n           linetype = input$linetype\n           ) +\n  coord_equal()\n\n' ->\n  for_shiny\n\n\n####### Shiny Stuff ####\n\nlibrary(shiny)\nlibrary(tidyverse)\n\n\n\n##### Define server logic ###\n#\n\nserver <- function(input, output) {\n\n\n  output$distText <- renderText({\n\n    for_shiny %>%\n      str_replace_all(\"input\\\\$z\", as.character(input$z)) %>%\n      str_replace_all(\"input\\\\$color\", as.character(input$color) %>% paste0('\\\\\"', ., '\\\\\"')) %>%\n      str_replace_all(\"input\\\\$linetype\", as.character(input$linetype) %>% paste0('\\\\\"', ., '\\\\\"')) %>%\n      str_replace_all(\"input\\\\$fill\", as.character(input$fill) %>% paste0('\\\\\"', ., '\\\\\"')) %>%\n      str_replace_all(\"input\\\\$alpha\", as.character(input$alpha)) %>%\n      str_replace_all(\"input\\\\$size\", as.character(input$size))\n\n\n  })\n\n  output$distPlot <- renderPlot({\n\n    eval(parse(text = for_shiny))\n\n  })\n\n}\n\n## Define UI for application that draws a histogram ##\nui <- fluidPage(\n\n  # Application title\n  titlePanel(\"When your heart has some rough edges...\" ),\n\n  titlePanel(\"... add vertices!\" ),\n\n  # Sidebar with a slider input for number of bins\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"z\",step = 1,\n                  \"Num Vertices:\",\n                  min = 10,\n                  max = 200,\n                  value = 16),\n      selectInput(\"color\", label = \"color\",\n                  choices = colors(),\n                  selected = \"magenta\"\n      ),\n      selectInput(\"fill\", label = \"fill\",\n                  choices = colors(),\n                  selected = \"darkred\"\n      ),\n      radioButtons(\"linetype\",\n                   label = \"linetype\",\n                   selected = \"dashed\",\n                   choices = c(\"dashed\", \"dotted\", \"solid\")\n      ),\n      sliderInput(\"alpha\",step = .02,\n                  \"alpha\",\n                  min = 0,\n                  max = 1,\n                  value = .8),\n      sliderInput(\"size\",step = 1,\n                  \"size\",\n                  min = 1,\n                  max = 5,\n                  value = 4)\n\n    ),\n\n    # Show a plot of the generated distribution\n    mainPanel(\n      verbatimTextOutput(\"distText\"),\n      plotOutput(\"distPlot\")\n    )\n  )\n\n  # titlePanel(x_mod)\n\n\n)\n\n# Run the application\nshinyApp(ui = ui, server = server)\n\n#' ->\n#my_shiny_app\n\n\n#eval(parse(text = my_shiny_app))\n\n","type":"text"}]
